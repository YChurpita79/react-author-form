'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _cssModuleHelper = require('./cssModuleHelper');

var _cssModuleToInterface = require('./cssModuleToInterface');

var _persist = require('./persist');

var _persist2 = _interopRequireDefault(_persist);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var TypingsForCssModulesPlugin = function () {
  function TypingsForCssModulesPlugin() {
    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, TypingsForCssModulesPlugin);

    this.verbose = options.verbose;
    this.indent = options.indent;
    this.moduleCache = {};
  }

  _createClass(TypingsForCssModulesPlugin, [{
    key: 'log',
    value: function log(msg) {
      if (this.verbose) {
        console.log(msg); // esl
      }
    }
  }, {
    key: 'logError',
    value: function logError() {
      var _console;

      (_console = console).error.apply(_console, arguments);
    }
  }, {
    key: 'rebuildModule',
    value: function rebuildModule(compilation, mod) {
      return new Promise(function rebuildPromise(resolve, reject) {
        compilation.rebuildModule(mod, function (err) {
          if (err) {
            reject(err);
            return;
          }
          resolve();
        });
      });
    }
  }, {
    key: 'wasModuleUpdated',
    value: function wasModuleUpdated(cssModule) {
      // if we dont know this module already return true
      if (!this.moduleCache[cssModule.resource]) {
        return true;
      }

      // the same resource may be loaded multiple times
      // we only want to extract it once however so filter out on a first come first serve basis
      if (this.moduleCache[cssModule.resource].id !== cssModule.id) {
        this.log('TypingsForCssModulesPlugin - Module ID: [' + cssModule.id + '] ignored. Module with id [' + this.moduleCache[cssModule.resource].id + '] is requiring this file already. Skipping...');
        return false;
      }

      // check if something in the module actually changed
      if (this.moduleCache[cssModule.resource].hash === cssModule.getSourceHash()) {
        this.log('TypingsForCssModulesPlugin - [' + cssModule.resource + '] did not change. Skipping...');
        return false;
      }

      return true;
    }
  }, {
    key: 'filterDirtyCssModule',
    value: function filterDirtyCssModule(cssModules) {
      var _this = this;

      return cssModules.filter(function (cssModule) {
        return _this.wasModuleUpdated(cssModule);
      });
    }
  }, {
    key: 'extractCssModuleDefintion',
    value: function extractCssModuleDefintion(cssModule, compilation) {
      var _this2 = this;

      var oldLoaders = cssModule.loaders;
      var newLoaders = (0, _cssModuleHelper.removeLoadersBeforeCssLoader)(oldLoaders);
      // we need the output of the css loader so we need to rerender this module
      // but remove all loaders till the css-loader before in order to get the desired output
      cssModule.loaders = newLoaders;
      return this.rebuildModule(compilation, cssModule).then(function () {
        var cssModuleRules = (0, _cssModuleHelper.extractCssModuleFromSource)(cssModule._source.source());
        var cssModuleDefinition = {
          resource: cssModule.resource,
          id: cssModule.id,
          rules: cssModuleRules
        };
        _this2.log('TypingsForCssModulesPlugin - extracted definition for ' + cssModule.resource);

        cssModule.loaders = oldLoaders;
        return _this2.rebuildModule(compilation, cssModule).then(function () {

          // we have to take the `original` hash of the file when its rendered with all loaders attached
          cssModuleDefinition.hash = cssModule.getSourceHash();

          return cssModuleDefinition;
        }, function (err) {
          _this2.logError('TypingsForCssModulesPlugin - [' + cssModule.resource + '] failed to rerender Module. Your output might be broken - consider retriggering webpack.', err);
        });
      }, function (err) {
        _this2.logError('TypingsForCssModulesPlugin - [' + cssModule.resource + '] failed to extract CSS Module Definitions. Skip typing extraction - trying to commence...', err);
      });
    }
  }, {
    key: 'retrieveCssModulesDefinitions',
    value: function retrieveCssModulesDefinitions(cssModules, compilation) {
      var _this3 = this;

      return Promise.all(cssModules.map(function (cssModule) {
        return _this3.extractCssModuleDefintion(cssModule, compilation);
      }));
    }
  }, {
    key: 'writeTypingsToFile',
    value: function writeTypingsToFile(typingsFilename, typingsContent) {
      (0, _persist2.default)(typingsFilename, typingsContent);
    }
  }, {
    key: 'cacheCssModule',
    value: function cacheCssModule(cssModuleDefinition) {
      var resource = cssModuleDefinition.resource;
      var id = cssModuleDefinition.id;
      var hash = cssModuleDefinition.hash;

      this.moduleCache[resource] = {
        id: id,
        hash: hash
      };
    }
  }, {
    key: 'persistCssModules',
    value: function persistCssModules(cssModuleDefinitions) {
      var _this4 = this;

      return Promise.all(cssModuleDefinitions.map(function (cssModuleDefinition) {
        var resource = cssModuleDefinition.resource;
        var rules = cssModuleDefinition.rules;

        var typingsFilename = (0, _cssModuleToInterface.filenameToTypingsFilename)(resource);
        var typingsContent = (0, _cssModuleToInterface.generateInterface)(rules, resource, _this4.indent);
        try {
          _this4.writeTypingsToFile(typingsFilename, typingsContent);
        } catch (err) {
          _this4.logError('TypingsForCssModulesPlugin - failed write typings to ' + typingsFilename, err);
        }
        _this4.log('TypingsForCssModulesPlugin - wrote definition for ' + resource + ' to ' + typingsFilename);
        _this4.cacheCssModule(cssModuleDefinition);
      }));
    }
  }, {
    key: 'apply',
    value: function apply(compiler) {
      var _this5 = this;

      compiler.plugin('after-compile', function (compilation, callback) {
        // only get modules that are loaded via css loader
        var cssModules = (0, _cssModuleHelper.filterCssModules)(compilation.modules);
        // if no module is found, skip it
        if (cssModules.length === 0) {
          _this5.log('TypingsForCssModulesPlugin - No CSS Module found. Skip typings extraction...');
          return callback();
        }

        // only take css modules that were touched and need rerendering
        var dirtyCssModules = _this5.filterDirtyCssModule(cssModules, _this5.moduleCache);
        // if no module is found, skip it
        if (dirtyCssModules.length === 0) {
          _this5.log('TypingsForCssModulesPlugin - No CSS Module was changed. Skip typings extraction...');
          return callback();
        }

        _this5.retrieveCssModulesDefinitions(dirtyCssModules, compilation).then(function (cssModuleDefinitions) {
          _this5.log('TypingsForCssModulesPlugin - extracted all typings. Proceeding to asset writing stage...');

          try {
            _this5.persistCssModules(cssModuleDefinitions);
            _this5.log('TypingsForCssModulesPlugin - all typings updated');
          } catch (err) {
            _this5.logError('TypingsForCssModulesPlugin - failed to write all typings', err);
          } finally {
            callback();
          }
        }, function (err) {
          _this5.logError('TypingsForCssModulesPlugin - something went wrong during the extraction phase. Proceeding to asset writing stage...', err);
          return callback();
        });
      });
    }
  }]);

  return TypingsForCssModulesPlugin;
}();

exports.default = TypingsForCssModulesPlugin;